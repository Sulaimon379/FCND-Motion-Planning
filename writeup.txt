Load the 2.5D map in the colliders.csv file describing the environment.
Discretize the environment into a grid or graph representation.
Define the start and goal locations. You can determine your home location from self._latitude and self._longitude.
Perform a search using A* or other search algorithm.
Use a collinearity test or ray tracing method (like Bresenham) to remove unnecessary waypoints.
Return waypoints in local ECEF coordinates (format for self.all_waypoints is [N, E, altitude, heading], where the droneâ€™s start location corresponds to [0, 0, 0, 0]).


1. Set the global home position
Here I read the first line of the "colliders.csv" file using the numpy loadtxt function to extract only 1st row and 1st and 2nd column.
I next extracted lat0 and lon0 as floating point values and use the self.set_home_position() method to set global home.

2. Set the current local position
Here, I retrieved the global_position as a numpy array with longitude, latitude and altitude using self._longitude, self._latitude,  self._altitude.
I next converted the global position to current local position using global_to_local() function with the global position and self.global_home

3. Set grid start position from local position
Here, I used the create_grid() function to create a grid.  The create_grid() function returns a grid representation of a 2D configuration space based on given obstacle data, a drone altitude of 5 and safety margin of 5 around obstacles; and north_offset, east_offset.
Next, I extracted the grid start position from the current position by substracting north_offset, east_offset from self._north, self._east.

4. Set grid goal position from geodetic coords
Here, I set the grid goal as some arbitrary position on the grid and substracted the north_offset, east_offset from the longitude and latitude of the position.

5. Modify A* to include diagonal motion (or replace A* altogether)
Here, modified the A* implementation provided in the planning_utils.py to include diagonal motion by creating conditions for actions Action.NW, Action.NE, Action.SW, Action.SE. This is shown below:
if x - 1 < 0 or y - 1 < 0 or grid[x-1,y-1] == 1:
        valid_actions.remove(Action.NW)
    if x - 1 < 0 or y + 1 > m or grid[x-1,y+1] == 1:
        valid_actions.remove(Action.NE)
    if x + 1 > n or y - 1 < 0 or grid[x+1,y-1] == 1:
        valid_actions.remove(Action.SW)
    if x + 1 > n or y + 1 > m or grid[x+1,y+1] == 1:
        valid_actions.remove(Action.SE)
		

6. Cull waypoints
In this step, I used a collinearity test to check for collinearity of the points in the path. 
creating a matrix that includes the coordinates of these three points as rows, then creating a determiant of these points. The determinant of the points must be equal to epsilon(1e-6) for the points to be collinear.
The idea is simply to prune the path of unnecessary waypoints.
The code for the collinearity and path pruning is shown below:
def collinearity_check(p1, p2, p3, epsilon=1e-6): 
    collinear = False
    #Create the matrix out of three points
    mat = np.vstack((point(p1), point(p2), point(p3)))    
    det = np.linalg.det(mat)
    # Set collinear to True if the determinant is less than epsilon
    if det < epsilon:
        collinear = True
        
    return collinear

def prune_path(path):
    pruned_path = [p for p in path]

    i = 0
    while i < len(pruned_path) - 2:
        p1 = pruned_path[i]
        p2 = pruned_path[i+1]
        p3 = pruned_path[i+2]

        if collinearity_check(p1, p2, p3):
            pruned_path.remove(pruned_path[i+1])
        else:
            i += 1
    return pruned_path

Next, I converted the paths to waypoints, set the waypoints as the value of self.waypoints and finally send the waypoints to the similautor for visualisation. 